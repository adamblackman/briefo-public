import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert, ActivityIndicator, KeyboardAvoidingView, Platform, ScrollView, SafeAreaView, Image } from 'react-native';
import { supabase } from '../lib/supabase';
import { useTheme } from '../context/ThemeContext';
import { useRouter } from 'expo-router';
import { useAuth } from '../context/AuthContext'; // To potentially redirect if already logged in or update UI based on auth state
import { Ionicons } from '@expo/vector-icons';

export default function AuthScreen() {
  const { colors } = useTheme();
  const router = useRouter();
  const { setSigningUp } = useAuth();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [username, setUsername] = useState('');
  const [isSignUp, setIsSignUp] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // Redirect if already logged in - this is better handled by a layout route group usually
  // useEffect(() => {
  //   if (session) {
  //     router.replace('/(tabs)');
  //   }
  // }, [session, router]);

  const handleAuth = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please enter both email and password.');
      return;
    }
    
    if (isSignUp) {
      if (!username) {
        Alert.alert('Error', 'Please enter a username.');
        return;
      }
      
      if (password !== confirmPassword) {
        Alert.alert('Error', 'Passwords do not match.');
        return;
      }

      // Check if username already exists
      const { data: existingUsers, error: usernameCheckError } = await supabase
        .from('profiles')
        .select('username')
        .eq('username', username)
        .limit(1);
      
      if (usernameCheckError) {
        Alert.alert('Error', 'Failed to check username availability. Please try again.');
        return;
      }
      
      if (existingUsers && existingUsers.length > 0) {
        Alert.alert('Error', 'This username is already taken. Please choose another one.');
        return;
      }
    }
    
    setLoading(true);
    try {
      if (isSignUp) {
        // Set the signing up flag to prevent profile checks
        setSigningUp(true);
        
        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
          email,
          password,
        });

        if (signUpError) throw signUpError;

        if (signUpData.user) {
          // Create profile for the new user
          const { error: profileError } = await supabase
            .from('profiles')
            .insert([{ 
              user_id: signUpData.user.id,
              username: username,
              name: username  // Adding the name field, initially set to the username
            }]); // Assumes 'id', 'created_at', 'updated_at' are auto-generated by DB
                                                     // 'news_categories' & 'favorite_companies' will be null/default

          if (profileError) {
            console.error('Profile creation error:', profileError);
            Alert.alert(
              'Error',
              'Failed to create your user profile. Please try again or contact support.'
            );
            setLoading(false); // Stop loading and return as profile creation is critical
            return;
          }

          // Profile creation successful, now handle session status for navigation/messaging
          if (signUpData.session) {
            // For sign-up, always go to select-categories
            router.replace('/select-categories');
          } else {
            // Email confirmation is required, session is null
            Alert.alert(
              'Signup Almost Complete!',
              'Please check your email to confirm your account. You will be guided to set up your news preferences after your first login.'
            );
          }
        } else {
          // This case implies signUpData.user is null without an error, which is unusual.
          Alert.alert('Signup Error', 'An unexpected issue occurred during sign up. Please try again.');
        }
      } else { // Sign In
        // Reset the signing up flag for sign in
        setSigningUp(false);
        
        const { data, error } = await supabase.auth.signInWithPassword({ email, password });
        if (error) throw error;
        
        // For sign-in, go directly to the news tab regardless of onboarding status
        router.replace('/(tabs)');
      }
    } catch (error: any) {
      Alert.alert('Authentication Error', error.message || 'An unexpected error occurred.');
    } finally {
      setLoading(false);
    }
  };

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    scrollContent: {
      flexGrow: 1,
      justifyContent: 'flex-start',
      padding: 20,
    },
    formContainer: {
      width: '100%',
      maxWidth: 400,
      alignSelf: 'center',
    },
    icon: {
      width: 100,
      height: 100,
      alignSelf: 'center',
      marginBottom: 20,
      marginTop: 40,
    },
    formContent: {
      flex: 1,
      justifyContent: 'center',
      minHeight: 400, // This ensures consistent centering
    },
    title: {
      fontSize: 32,
      fontWeight: 'bold',
      color: colors.text,
      textAlign: 'center',
      marginBottom: 10,
      fontFamily: 'Inter-Bold',
    },
    subtitle: {
        fontSize: 18,
        color: colors.textSecondary,
        textAlign: 'center',
        marginBottom: 30,
        fontFamily: 'Inter-Regular',
    },
    input: {
      backgroundColor: colors.cardBackground,
      color: colors.text,
      paddingHorizontal: 15,
      paddingVertical: 15,
      borderRadius: 8,
      marginBottom: 15,
      fontSize: 16,
      borderWidth: 1,
      borderColor: colors.border,
      fontFamily: 'Inter-Regular',
    },
    button: {
      backgroundColor: colors.accent,
      padding: 18,
      borderRadius: 8,
      alignItems: 'center',
      marginBottom: 15,
    },
    buttonText: {
      color: '#333333', // Dark grey text
      fontSize: 18,
      fontWeight: 'bold',
      fontFamily: 'Inter-Bold',
    },
    toggleText: {
      color: colors.accent,
      textAlign: 'center',
      fontSize: 16,
      fontFamily: 'Inter-Medium',
    },
    loadingOverlay: {
      ...StyleSheet.absoluteFillObject,
      backgroundColor: 'rgba(0,0,0,0.5)',
      justifyContent: 'center',
      alignItems: 'center',
    },
    inputContainer: {
      position: 'relative',
      marginBottom: 15,
    },
    eyeIcon: {
      position: 'absolute',
      right: 15,
      top: 15,
    }
  });

  // Use regular View for Android since it handles keyboard differently
  const Container = Platform.OS === 'ios' ? KeyboardAvoidingView : View;
  const keyboardBehavior = Platform.OS === 'ios' ? 'padding' : undefined;

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colors.background }}>
      <Container
        behavior={keyboardBehavior}
        style={styles.container}
      >
        <ScrollView 
          contentContainerStyle={styles.scrollContent}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.formContainer}>
            <Image 
              source={require('../assets/icon.png')}
              style={styles.icon}
              resizeMode="contain"
            />
            <View style={styles.formContent}>
              <Text style={styles.subtitle}>
                {isSignUp ? 'Create a new account' : 'Sign in to your account'}
              </Text>
              
              {isSignUp && (
                <TextInput
                  style={styles.input}
                  placeholder="Username"
                  placeholderTextColor={colors.textSecondary}
                  value={username}
                  onChangeText={setUsername}
                  autoCapitalize="none"
                />
              )}
              
              <TextInput
                style={styles.input}
                placeholder="Email"
                placeholderTextColor={colors.textSecondary}
                value={email}
                onChangeText={setEmail}
                autoCapitalize="none"
                keyboardType="email-address"
              />
              
              <View style={styles.inputContainer}>
                <TextInput
                  style={{...styles.input, marginBottom: 0}}
                  placeholder="Password"
                  placeholderTextColor={colors.textSecondary}
                  value={password}
                  onChangeText={setPassword}
                  secureTextEntry={!showPassword}
                  autoCapitalize="none"
                />
                <TouchableOpacity 
                  style={styles.eyeIcon} 
                  onPress={() => setShowPassword(!showPassword)}
                >
                  <Ionicons 
                    name={showPassword ? "eye-off" : "eye"} 
                    size={24} 
                    color={colors.textSecondary} 
                  />
                </TouchableOpacity>
              </View>
              
              {isSignUp && (
                <View style={styles.inputContainer}>
                  <TextInput
                    style={{...styles.input, marginBottom: 0}}
                    placeholder="Confirm Password"
                    placeholderTextColor={colors.textSecondary}
                    value={confirmPassword}
                    onChangeText={setConfirmPassword}
                    secureTextEntry={!showConfirmPassword}
                    autoCapitalize="none"
                  />
                  <TouchableOpacity 
                    style={styles.eyeIcon} 
                    onPress={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    <Ionicons 
                      name={showConfirmPassword ? "eye-off" : "eye"} 
                      size={24} 
                      color={colors.textSecondary} 
                    />
                  </TouchableOpacity>
                </View>
              )}
              
              <TouchableOpacity style={styles.button} onPress={handleAuth} disabled={loading}>
                <Text style={styles.buttonText}>{isSignUp ? 'Sign Up' : 'Sign In'}</Text>
              </TouchableOpacity>
              
              <TouchableOpacity onPress={() => setIsSignUp(!isSignUp)} disabled={loading}>
                <Text style={styles.toggleText}>
                  {isSignUp ? 'Already have an account? Sign In' : "Don't have an account? Sign Up"}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </ScrollView>
        
        {loading && (
          <View style={styles.loadingOverlay}>
            <ActivityIndicator size="large" color={colors.accent} />
          </View>
        )}
      </Container>
    </SafeAreaView>
  );
} 